/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.mongodb.devrel.pods.performancebench;

import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.core.util.StatusPrinter;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.Iterator;
import java.util.logging.LogManager;
import org.apache.commons.cli.ParseException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
//import org.slf4j.bridge.SLF4JBridgeHandler;

public class PerformanceBench {

    static final String version = "PerformanceBench 0.0.3";
    static Logger logger;

    public static void main(String[] args) {

        BenchOptions options = null;

        logger = LoggerFactory.getLogger(PerformanceBench.class);
        logger.info(version);


        //Uncomment the following lines if there is a problem with logback.xml -
        LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
        // print logback's internal status
        StatusPrinter.print(lc);


        try {
            options = new BenchOptions(args);
        } catch (ParseException e) {
            logger.error(e.getMessage());
            System.exit(1);
        } catch (FileNotFoundException e) {
            logger.error("Can't open config file");
            logger.error(e.getMessage());
            System.exit(1);
        } catch (IOException e) {
            logger.error("Issue in reading config file");
            logger.error(e.getMessage());
            System.exit(1);
        } catch (org.json.simple.parser.ParseException e) {
            logger.error("Issue in parsing JSON in config file");
            logger.error(e.getMessage());
            System.exit(1);
        }
        for (Iterator<JSONObject> it = ((JSONArray)options.get("models")).iterator(); it.hasNext();) {
            JSONObject modelArgs = it.next();
            SchemaTest st = null;
            try {
                Class<?> clazz = Class.forName(modelArgs.get("namespace").toString() + "." + modelArgs.get("className").toString());
                Object object = clazz.getDeclaredConstructor().newInstance();
                st = (SchemaTest)object;
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | NoSuchMethodException | SecurityException | InvocationTargetException e) {
                logger.error("Issue instantiating SchemaTest Object " + modelArgs.get("className").toString());
                logger.error(e.getMessage());
                System.exit(1);
            }
            st.initialize(modelArgs);
            TestRunner runner = new TestRunner();
            logger.info("Running tests...");
            runner.runTest(st, modelArgs);
            st.cleanup();
        }

    }

}

